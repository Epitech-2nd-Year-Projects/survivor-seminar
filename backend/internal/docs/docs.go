// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "Returns general information about the service and the API entrypoint.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Basic information",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/admin/events": {
            "post": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Creates an event (admin required).",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events"
                ],
                "summary": "Create event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Description",
                        "name": "description",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Type (conference, meetup, ...)",
                        "name": "event_type",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Location",
                        "name": "location",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Target audience",
                        "name": "target_audience",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Start date (RFC3339)",
                        "name": "start_date",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "End date (RFC3339)",
                        "name": "end_date",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "description": "Capacity",
                        "name": "capacity",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Event image",
                        "name": "image",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/response.EventObjectResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        },
        "/admin/events/{id}": {
            "delete": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Deletes an event (admin required).",
                "tags": [
                    "Events"
                ],
                "summary": "Delete event",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Updates an event (admin required).",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events"
                ],
                "summary": "Update event",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Event name",
                        "name": "name",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Description",
                        "name": "description",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Type",
                        "name": "event_type",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Location",
                        "name": "location",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Audience",
                        "name": "target_audience",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Start date (RFC3339)",
                        "name": "start_date",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "End date (RFC3339)",
                        "name": "end_date",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "description": "Capacity",
                        "name": "capacity",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Event image",
                        "name": "image",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.EventObjectResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        },
        "/admin/investors": {
            "post": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Creates an investor (admin required).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Investors"
                ],
                "summary": "Create investor",
                "parameters": [
                    {
                        "description": "Investor",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.InvestorCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/response.InvestorObjectResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        },
        "/admin/investors/{id}": {
            "delete": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Deletes an investor (admin required).",
                "tags": [
                    "Investors"
                ],
                "summary": "Delete investor",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Investor ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Updates an investor (admin required).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Investors"
                ],
                "summary": "Update investor",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Investor ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Fields to update",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.InvestorUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.InvestorObjectResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        },
        "/admin/news": {
            "post": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Creates a news item (admin required).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "News"
                ],
                "summary": "Create news",
                "parameters": [
                    {
                        "description": "News",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.NewsCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/response.NewsObjectResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        },
        "/admin/news/{id}": {
            "delete": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Deletes a news item (admin required).",
                "tags": [
                    "News"
                ],
                "summary": "Delete news",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "News ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Updates a news item (admin required).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "News"
                ],
                "summary": "Update news",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "News ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Fields to update",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.NewsUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.NewsObjectResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        },
        "/admin/opportunities": {
            "post": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Creates an opportunity (admin required).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Opportunities"
                ],
                "summary": "Create opportunity",
                "parameters": [
                    {
                        "description": "Opportunity",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.OpportunityCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/response.OpportunityObjectResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        },
        "/admin/opportunities/{id}": {
            "delete": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Deletes an opportunity (admin required).",
                "tags": [
                    "Opportunities"
                ],
                "summary": "Delete opportunity",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Opportunity ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        },
        "/admin/partners": {
            "post": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Creates a partner (admin required).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Partners"
                ],
                "summary": "Create partner",
                "parameters": [
                    {
                        "description": "Partner",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.PartnerCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/response.PartnerObjectResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        },
        "/admin/partners/{id}": {
            "delete": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Deletes a partner (admin required).",
                "tags": [
                    "Partners"
                ],
                "summary": "Delete partner",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Partner ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Updates a partner (admin required).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Partners"
                ],
                "summary": "Update partner",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Partner ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Fields to update",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.PartnerUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.PartnerObjectResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        },
        "/admin/startups": {
            "post": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Creates a startup (admin required).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Startups"
                ],
                "summary": "Create startup",
                "parameters": [
                    {
                        "description": "Startup",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Startup"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/response.StartupObjectResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        },
        "/admin/startups/{id}": {
            "delete": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Deletes a startup by ID (admin required).",
                "tags": [
                    "Startups"
                ],
                "summary": "Delete startup",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Startup ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Updates a startup by ID (admin required).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Startups"
                ],
                "summary": "Update startup",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Startup ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Fields to update",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.StartupUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StartupObjectResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        },
        "/admin/statistics": {
            "get": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Retrieves various statistics about projects and engagement.",
                "tags": [
                    "Admin/Statistics"
                ],
                "summary": "Get general statistics",
                "parameters": [
                    {
                        "enum": [
                            "weekly",
                            "monthly"
                        ],
                        "type": "string",
                        "default": "weekly",
                        "description": "Time period for growth calculation",
                        "name": "period",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StatisticsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        },
        "/admin/statistics/top": {
            "get": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Returns a list of top projects based on views count for a given period.",
                "tags": [
                    "Admin/Statistics"
                ],
                "summary": "Get top projects",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of top projects to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "week",
                            "month",
                            "all"
                        ],
                        "type": "string",
                        "default": "week",
                        "description": "Time period for top projects",
                        "name": "period",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.TopProjectsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        },
        "/admin/sync/full": {
            "post": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Queues a full synchronization.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin/Sync"
                ],
                "summary": "Trigger full sync",
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        },
        "/admin/sync/incremental": {
            "post": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Queues an incremental synchronization.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin/Sync"
                ],
                "summary": "Trigger incremental sync",
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        },
        "/admin/sync/status": {
            "get": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Returns the scheduler state (running flag, queue length, last runs).",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin/Sync"
                ],
                "summary": "Sync status",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SyncStatusResponse"
                        }
                    }
                }
            }
        },
        "/admin/users": {
            "post": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Creates a user (admin required).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create user",
                "parameters": [
                    {
                        "description": "User",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.UserCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/response.UserObjectResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        },
        "/admin/users/{id}": {
            "delete": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Deletes a user by ID (admin required).",
                "tags": [
                    "Users"
                ],
                "summary": "Delete user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Updates a user (admin required).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Fields to update",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.UserUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.UserObjectResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        },
        "/auth/forgot-password": {
            "post": {
                "description": "Sends a password reset email (if the user exists).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Forgot password",
                "parameters": [
                    {
                        "description": "Email",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.AuthForgotPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Verifies credentials, sets HttpOnly cookies, and returns the user profile. No tokens in response.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Sign in",
                "parameters": [
                    {
                        "description": "Credentials",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.AuthLoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.AuthLoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "description": "Clears auth cookies.",
                "tags": [
                    "Auth"
                ],
                "summary": "Logout",
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Issues new cookies using the refresh token cookie. No body required; no content returned.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Refresh session",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Creates a user, sends a verification email, and returns the profile. No tokens are returned; cookies are set after login.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Sign up",
                "parameters": [
                    {
                        "description": "Registration data",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.AuthRegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/response.AuthRegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        },
        "/auth/reset-password": {
            "post": {
                "description": "Updates the password using a valid reset token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Reset password",
                "parameters": [
                    {
                        "description": "New password",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.AuthResetPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        },
        "/auth/verify": {
            "get": {
                "description": "Verifies the user's email using a one-time token.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Verify email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Verification token",
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "description": "Token in body",
                        "name": "payload",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/requests.AuthVerifyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            },
            "post": {
                "description": "Verifies the user's email using a one-time token.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Verify email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Verification token",
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "description": "Token in body",
                        "name": "payload",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/requests.AuthVerifyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        },
        "/conversations": {
            "get": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Returns a paginated list of conversations for the authenticated user with unread counts.",
                "tags": [
                    "Conversations"
                ],
                "summary": "List user conversations",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Page size",
                        "name": "per_page",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "id",
                            "created_at",
                            "updated_at"
                        ],
                        "type": "string",
                        "default": "updated_at",
                        "description": "Sort field",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "description": "Sort order",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.ConversationsWithUnreadResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Creates a new conversation with specified participants.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Conversations"
                ],
                "summary": "Create conversation",
                "parameters": [
                    {
                        "description": "Conversation",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.ConversationCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/response.ConversationObjectResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        },
        "/conversations/{id}": {
            "get": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Retrieves a conversation by ID with messages.",
                "tags": [
                    "Conversations"
                ],
                "summary": "Get conversation",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Conversation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.ConversationObjectResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        },
        "/conversations/{id}/mark-read": {
            "post": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Marks messages as read up to a specific message ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Conversations"
                ],
                "summary": "Mark message as read",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Conversation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Message ID",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.MessageMarkReadRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        },
        "/conversations/{id}/messages": {
            "get": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Returns paginated messages for a conversation.",
                "tags": [
                    "Conversations"
                ],
                "summary": "Get conversation messages",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Conversation ID",
                        "name": "id",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Page size",
                        "name": "per_page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.MessageListResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Sends a message to a conversation.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Conversations"
                ],
                "summary": "Send message",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Conversation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Message",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.MessageSendRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/response.MessageObjectResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        },
        "/events": {
            "get": {
                "description": "Returns a paginated list of events with filters and sorting.",
                "tags": [
                    "Events"
                ],
                "summary": "List events",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Page size",
                        "name": "per_page",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "id",
                            "name",
                            "event_type",
                            "start_date",
                            "end_date",
                            "created_at",
                            "updated_at"
                        ],
                        "type": "string",
                        "default": "start_date",
                        "description": "Sort field",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "description": "Sort order",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by event type",
                        "name": "event_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by location",
                        "name": "location",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by start date (YYYY-MM-DD)",
                        "name": "start_date",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.EventListResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        },
        "/events/{id}": {
            "get": {
                "description": "Retrieves an event by ID.",
                "tags": [
                    "Events"
                ],
                "summary": "Get event",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.EventObjectResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        },
        "/founder/startups/{id}": {
            "delete": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Deletes a startup by ID (admin required).",
                "tags": [
                    "Startups"
                ],
                "summary": "Delete startup",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Startup ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Updates a startup by ID (admin required).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Startups"
                ],
                "summary": "Update startup",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Startup ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Fields to update",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.StartupUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StartupObjectResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Returns dependencies state (DB, etc.), uptime, environment and version.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "API health status",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/investors": {
            "get": {
                "description": "Returns a paginated list of investors with filters and sorting.",
                "tags": [
                    "Investors"
                ],
                "summary": "List investors",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Page size",
                        "name": "per_page",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "id",
                            "name",
                            "email",
                            "created_at",
                            "investor_type",
                            "investment_focus"
                        ],
                        "type": "string",
                        "default": "created_at",
                        "description": "Sort field",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "description": "Sort order",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by investor type",
                        "name": "investor_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by investment focus (contains)",
                        "name": "investment_focus",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by email",
                        "name": "email",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.InvestorListResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        },
        "/investors/{id}": {
            "get": {
                "description": "Retrieves an investor by ID.",
                "tags": [
                    "Investors"
                ],
                "summary": "Get investor",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Investor ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.InvestorObjectResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        },
        "/news": {
            "get": {
                "description": "Returns a paginated list of news with filters and sorting.",
                "tags": [
                    "News"
                ],
                "summary": "List news",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Page size",
                        "name": "per_page",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "id",
                            "title",
                            "news_date",
                            "category",
                            "startup_id",
                            "created_at",
                            "updated_at"
                        ],
                        "type": "string",
                        "default": "news_date",
                        "description": "Sort field",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "description": "Sort order",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by category",
                        "name": "category",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by startup ID",
                        "name": "startup_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by news date (YYYY-MM-DD)",
                        "name": "news_date",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.NewsListResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        },
        "/news/{id}": {
            "get": {
                "description": "Retrieves a news item by ID.",
                "tags": [
                    "News"
                ],
                "summary": "Get news item",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "News ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.NewsObjectResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        },
        "/opportunities": {
            "get": {
                "description": "Returns a paginated list of opportunities with filters and sorting.",
                "tags": [
                    "Opportunities"
                ],
                "summary": "List opportunities",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Page size",
                        "name": "per_page",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "id",
                            "title",
                            "type",
                            "organism",
                            "deadline",
                            "created_at",
                            "updated_at"
                        ],
                        "type": "string",
                        "default": "created_at",
                        "description": "Sort field",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "description": "Sort order",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by type (grant, loan, etc.)",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by organism",
                        "name": "organism",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by deadline (YYYY-MM-DD)",
                        "name": "deadline",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.OpportunityListResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        },
        "/opportunities/{id}": {
            "get": {
                "description": "Retrieves an opportunity by ID.",
                "tags": [
                    "Opportunities"
                ],
                "summary": "Get opportunity",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Opportunity ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.OpportunityObjectResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        },
        "/partners": {
            "get": {
                "description": "Returns a paginated list of partners with sorting.",
                "tags": [
                    "Partners"
                ],
                "summary": "List partners",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Page size",
                        "name": "per_page",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "id",
                            "name",
                            "email",
                            "legal_status",
                            "partnership_type",
                            "created_at"
                        ],
                        "type": "string",
                        "default": "created_at",
                        "description": "Sort field",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "description": "Sort order",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.PartnerListResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        },
        "/partners/{id}": {
            "get": {
                "description": "Retrieves a partner by ID.",
                "tags": [
                    "Partners"
                ],
                "summary": "Get partner",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Partner ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.PartnerObjectResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        },
        "/startups": {
            "get": {
                "description": "Returns a paginated list of startups with filters and sorting.",
                "tags": [
                    "Startups"
                ],
                "summary": "List startups",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Page size",
                        "name": "per_page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "created_at",
                        "description": "Sort field",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "description": "Sort order",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "tech",
                            "health",
                            "finance"
                        ],
                        "type": "string",
                        "description": "Sector filter",
                        "name": "sector",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "early",
                            "middle",
                            "late"
                        ],
                        "type": "string",
                        "description": "Maturity filter",
                        "name": "maturity",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "ongoing",
                            "completed"
                        ],
                        "type": "string",
                        "description": "Project status",
                        "name": "project_status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Founder filter",
                        "name": "founder",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "CreatedAt filter",
                        "name": "created_at",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StartupListResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        },
        "/startups/{id}": {
            "get": {
                "description": "Retrieves a startup by ID.",
                "tags": [
                    "Startups"
                ],
                "summary": "Get startup",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Startup ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StartupObjectResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        },
        "/startups/{id}/views": {
            "post": {
                "description": "Increments the views counter of a startup.",
                "tags": [
                    "Startups"
                ],
                "summary": "Increment views count",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Startup ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.StartupObjectResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Returns a paginated list of users with optional filters.",
                "tags": [
                    "Users"
                ],
                "summary": "List users",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Page size",
                        "name": "per_page",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "id",
                            "email",
                            "name",
                            "role",
                            "created_at",
                            "updated_at"
                        ],
                        "type": "string",
                        "default": "created_at",
                        "description": "Sort field",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "description": "Sort order",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "admin",
                            "user",
                            "investor",
                            "founder"
                        ],
                        "type": "string",
                        "description": "Filter by role",
                        "name": "role",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by email (contains)",
                        "name": "email",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by name (contains)",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.UserListResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        },
        "/users/email/{email}": {
            "get": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Retrieves a user by email.",
                "tags": [
                    "Users"
                ],
                "summary": "Get user by email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User email",
                        "name": "email",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.UserObjectResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        },
        "/users/me": {
            "get": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Returns the current authenticated user's profile.",
                "tags": [
                    "Users"
                ],
                "summary": "My profile",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.UserObjectResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Retrieves a user by ID.",
                "tags": [
                    "Users"
                ],
                "summary": "Get user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.UserObjectResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorBody"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Conversation": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Creation timestamp (UTC)",
                    "type": "string",
                    "format": "date-time"
                },
                "id": {
                    "description": "Unique conversation identifier",
                    "type": "integer",
                    "example": 1
                },
                "is_group": {
                    "description": "Whether this is a group conversation",
                    "type": "boolean",
                    "example": false
                },
                "last_message": {
                    "$ref": "#/definitions/models.Message"
                },
                "last_message_id": {
                    "description": "ID of the last message (optimization)",
                    "type": "integer"
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Message"
                    }
                },
                "participants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ConversationParticipant"
                    }
                },
                "title": {
                    "description": "Conversation title (optional, useful for group chats)",
                    "type": "string",
                    "example": "Project Discussion"
                },
                "updated_at": {
                    "description": "Update timestamp (UTC)",
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "models.ConversationParticipant": {
            "type": "object",
            "properties": {
                "conversation_id": {
                    "description": "Conversation ID",
                    "type": "integer",
                    "example": 1
                },
                "id": {
                    "description": "Unique participant identifier",
                    "type": "integer",
                    "example": 1
                },
                "joined_at": {
                    "description": "When the user joined the conversation",
                    "type": "string",
                    "format": "date-time"
                },
                "last_read_message_id": {
                    "description": "ID of the last message read by this user",
                    "type": "integer"
                },
                "role": {
                    "description": "Participant role (member, owner, etc.)",
                    "type": "string",
                    "enum": [
                        "member",
                        "owner"
                    ],
                    "example": "member"
                },
                "user": {
                    "description": "Relationships",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.User"
                        }
                    ]
                },
                "user_id": {
                    "description": "User ID",
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "models.Event": {
            "type": "object",
            "properties": {
                "capacity": {
                    "description": "Capacity (seats)",
                    "type": "integer",
                    "example": 300
                },
                "created_at": {
                    "description": "Creation timestamp (UTC)",
                    "type": "string",
                    "format": "date-time"
                },
                "description": {
                    "description": "Short description",
                    "type": "string",
                    "example": "Annual tech conference"
                },
                "end_date": {
                    "description": "End date/time (UTC)",
                    "type": "string",
                    "format": "date-time"
                },
                "event_type": {
                    "description": "Event type",
                    "type": "string",
                    "example": "conference"
                },
                "id": {
                    "description": "Unique event identifier",
                    "type": "integer",
                    "example": 1
                },
                "image_url": {
                    "description": "Image URL",
                    "type": "string",
                    "format": "uri",
                    "example": "https://cdn.example.com/events/1.png"
                },
                "location": {
                    "description": "Venue or city",
                    "type": "string",
                    "example": "Paris"
                },
                "name": {
                    "description": "Event name",
                    "type": "string",
                    "example": "Conf 2025"
                },
                "start_date": {
                    "description": "Start date/time (UTC)",
                    "type": "string",
                    "format": "date-time"
                },
                "target_audience": {
                    "description": "Intended audience",
                    "type": "string",
                    "example": "Startups"
                },
                "updated_at": {
                    "description": "Update timestamp (UTC)",
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "models.Investor": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "Address",
                    "type": "string",
                    "example": "21 Jump Street, Paris"
                },
                "created_at": {
                    "description": "Creation timestamp (UTC)",
                    "type": "string",
                    "format": "date-time"
                },
                "description": {
                    "description": "Short description",
                    "type": "string",
                    "example": "Early-stage VC"
                },
                "email": {
                    "description": "Contact email",
                    "type": "string",
                    "format": "email",
                    "example": "contact@vcalpha.tld"
                },
                "id": {
                    "description": "Unique investor identifier",
                    "type": "integer",
                    "example": 1
                },
                "investment_focus": {
                    "description": "Focus (industries, stages)",
                    "type": "string",
                    "example": "Seed, Series A"
                },
                "investor_type": {
                    "description": "Type (VC, CVC, angel, ...)",
                    "type": "string",
                    "example": "VC"
                },
                "legal_status": {
                    "description": "Legal status",
                    "type": "string",
                    "example": "SaaS"
                },
                "name": {
                    "description": "Legal name",
                    "type": "string",
                    "example": "VC Alpha"
                },
                "phone": {
                    "description": "Contact phone",
                    "type": "string",
                    "example": "+33 1 23 45 67 89"
                }
            }
        },
        "models.Message": {
            "type": "object",
            "properties": {
                "content": {
                    "description": "Message content",
                    "type": "string",
                    "example": "Hello, how are you?"
                },
                "conversation_id": {
                    "description": "Conversation ID",
                    "type": "integer",
                    "example": 1
                },
                "created_at": {
                    "description": "Creation timestamp (UTC)",
                    "type": "string",
                    "format": "date-time"
                },
                "deleted_at": {
                    "description": "Soft delete timestamp (for moderation)",
                    "type": "string"
                },
                "id": {
                    "description": "Unique message identifier",
                    "type": "integer",
                    "example": 1
                },
                "sender": {
                    "$ref": "#/definitions/models.User"
                },
                "sender_id": {
                    "description": "Sender user ID",
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "models.News": {
            "type": "object",
            "properties": {
                "category": {
                    "description": "Category or topic",
                    "type": "string",
                    "example": "startup"
                },
                "created_at": {
                    "description": "Creation timestamp (UTC)",
                    "type": "string",
                    "format": "date-time"
                },
                "description": {
                    "description": "Body text",
                    "type": "string",
                    "example": "Series A raised"
                },
                "id": {
                    "description": "Unique news identifier",
                    "type": "integer",
                    "example": 1
                },
                "image_url": {
                    "description": "Image URL",
                    "type": "string",
                    "format": "uri",
                    "example": "https://cdn.example.com/news/1.png"
                },
                "location": {
                    "description": "Location (if relevant)",
                    "type": "string",
                    "example": "Paris"
                },
                "news_date": {
                    "description": "Publication date",
                    "type": "string",
                    "format": "date"
                },
                "startup_id": {
                    "description": "Related startup ID",
                    "type": "integer",
                    "example": 1
                },
                "title": {
                    "description": "Title",
                    "type": "string",
                    "example": "Funding round"
                },
                "updated_at": {
                    "description": "Update timestamp (UTC)",
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "models.Opportunity": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Creation timestamp (UTC)",
                    "type": "string",
                    "format": "date-time"
                },
                "criteria": {
                    "description": "Eligibility criteria",
                    "type": "string",
                    "example": "Student or Startup \u003c 3 years"
                },
                "deadline": {
                    "description": "Deadline (UTC)",
                    "type": "string",
                    "format": "date-time"
                },
                "description": {
                    "description": "Short description",
                    "type": "string",
                    "example": "Funding program for AI"
                },
                "external_link": {
                    "description": "External reference URL",
                    "type": "string",
                    "format": "uri",
                    "example": "https://example.com/opportunity"
                },
                "id": {
                    "description": "Unique opportunity identifier",
                    "type": "integer",
                    "example": 1
                },
                "organism": {
                    "description": "Issuing organization",
                    "type": "string",
                    "example": "EU"
                },
                "title": {
                    "description": "Opportunity title",
                    "type": "string",
                    "example": "AI Grant"
                },
                "type": {
                    "description": "Opportunity type",
                    "type": "string",
                    "example": "grant"
                },
                "updated_at": {
                    "description": "Update timestamp (UTC)",
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "models.Partner": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "Mailing address",
                    "type": "string",
                    "example": "5 Avenue Anatole France, Paris"
                },
                "created_at": {
                    "description": "Creation timestamp (UTC)",
                    "type": "string",
                    "format": "date-time"
                },
                "description": {
                    "description": "Short description",
                    "type": "string",
                    "example": "Sponsor"
                },
                "email": {
                    "description": "Contact email",
                    "type": "string",
                    "format": "email",
                    "example": "partners@acme.tld"
                },
                "id": {
                    "description": "Unique partner identifier",
                    "type": "integer",
                    "example": 1
                },
                "legal_status": {
                    "description": "Legal status",
                    "type": "string",
                    "example": "SAS"
                },
                "name": {
                    "description": "Partner legal name",
                    "type": "string",
                    "example": "ACME Corp"
                },
                "partnership_type": {
                    "description": "Type of partnership",
                    "type": "string",
                    "example": "sponsor"
                },
                "phone": {
                    "description": "Contact phone",
                    "type": "string",
                    "example": "+33 1 23 45 67 89"
                }
            }
        },
        "models.Startup": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "Mailing address",
                    "type": "string",
                    "example": "10 Rue de Rivoli, Paris"
                },
                "created_at": {
                    "description": "Creation timestamp (UTC)",
                    "type": "string",
                    "format": "date-time"
                },
                "description": {
                    "description": "Short description",
                    "type": "string",
                    "example": "AI platform for SMBs"
                },
                "email": {
                    "description": "Contact email",
                    "type": "string",
                    "format": "email",
                    "example": "contact@acme.tld"
                },
                "founders": {
                    "description": "Founders array (JSON)",
                    "type": "object"
                },
                "id": {
                    "description": "Unique startup identifier",
                    "type": "integer",
                    "example": 1
                },
                "legal_status": {
                    "description": "Legal status",
                    "type": "string",
                    "example": "SAS"
                },
                "maturity": {
                    "description": "Maturity",
                    "type": "string",
                    "enum": [
                        "early",
                        "middle",
                        "late"
                    ],
                    "example": "early"
                },
                "name": {
                    "description": "Startup name",
                    "type": "string",
                    "example": "Acme"
                },
                "needs": {
                    "description": "Stated needs",
                    "type": "string",
                    "example": "Funding, Mentorship"
                },
                "phone": {
                    "description": "Contact phone",
                    "type": "string",
                    "example": "+33 1 23 45 67 89"
                },
                "project_status": {
                    "description": "Project status",
                    "type": "string",
                    "enum": [
                        "ongoing",
                        "completed"
                    ],
                    "example": "ongoing"
                },
                "sector": {
                    "description": "Business sector",
                    "type": "string",
                    "enum": [
                        "tech",
                        "health",
                        "finance"
                    ],
                    "example": "tech"
                },
                "social_media_url": {
                    "description": "Social media URL",
                    "type": "string",
                    "format": "uri",
                    "example": "https://x.com/acme"
                },
                "views_count": {
                    "description": "Views count",
                    "type": "integer",
                    "example": 0
                },
                "website_url": {
                    "description": "Website URL",
                    "type": "string",
                    "format": "uri",
                    "example": "https://acme.tld"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Creation timestamp (UTC)",
                    "type": "string",
                    "format": "date-time"
                },
                "email": {
                    "description": "Email address (unique)",
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                },
                "email_verified": {
                    "description": "Whether the email has been verified",
                    "type": "boolean",
                    "example": false
                },
                "founder_id": {
                    "description": "Related founder profile ID",
                    "type": "integer",
                    "example": 1
                },
                "id": {
                    "description": "Unique user identifier",
                    "type": "integer",
                    "example": 1
                },
                "image_url": {
                    "description": "Avatar URL",
                    "type": "string",
                    "format": "uri",
                    "example": "https://cdn.example.com/avatars/1.png"
                },
                "investor_id": {
                    "description": "Related investor profile ID",
                    "type": "integer",
                    "example": 2
                },
                "name": {
                    "description": "Display name",
                    "type": "string",
                    "example": "Jane Doe"
                },
                "role": {
                    "description": "Role name",
                    "type": "string",
                    "enum": [
                        "admin",
                        "user",
                        "investor",
                        "founder"
                    ],
                    "example": "user"
                },
                "updated_at": {
                    "description": "Update timestamp (UTC)",
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "requests.AuthForgotPasswordRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "Account email to send reset instructions",
                    "type": "string",
                    "format": "email",
                    "example": "john@doe.tld"
                }
            }
        },
        "requests.AuthLoginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "Email address",
                    "type": "string",
                    "format": "email",
                    "example": "john@doe.tld"
                },
                "password": {
                    "description": "Password",
                    "type": "string",
                    "example": "secret123"
                }
            }
        },
        "requests.AuthRegisterRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "Email address of the user",
                    "type": "string",
                    "format": "email",
                    "example": "john@doe.tld"
                },
                "founder_id": {
                    "description": "Optional associated founder profile ID",
                    "type": "integer",
                    "example": 1
                },
                "image_url": {
                    "description": "Optional profile image URL",
                    "type": "string",
                    "format": "uri",
                    "example": "https://cdn.example.com/avatars/john.png"
                },
                "investor_id": {
                    "description": "Optional associated investor profile ID",
                    "type": "integer",
                    "example": 2
                },
                "name": {
                    "description": "Full name to display",
                    "type": "string",
                    "example": "John Doe"
                },
                "password": {
                    "description": "Plain password (min 6 chars)",
                    "type": "string",
                    "example": "secret123"
                },
                "role": {
                    "description": "Account role",
                    "type": "string",
                    "enum": [
                        "investor",
                        "founder"
                    ],
                    "example": "founder"
                }
            }
        },
        "requests.AuthResetPasswordRequest": {
            "type": "object",
            "properties": {
                "new_password": {
                    "description": "New password to set",
                    "type": "string",
                    "example": "secret123"
                },
                "token": {
                    "description": "Password reset token",
                    "type": "string",
                    "example": "\u003creset-token\u003e"
                }
            }
        },
        "requests.AuthVerifyRequest": {
            "type": "object",
            "properties": {
                "token": {
                    "description": "One-time verification token",
                    "type": "string",
                    "example": "\u003cverify-token\u003e"
                }
            }
        },
        "requests.ConversationCreateRequest": {
            "type": "object"
        },
        "requests.InvestorCreateRequest": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "Mailing address",
                    "type": "string",
                    "example": "21 Jump Street, Paris"
                },
                "description": {
                    "description": "Short description",
                    "type": "string",
                    "example": "Early-stage VC"
                },
                "email": {
                    "description": "Contact email",
                    "type": "string",
                    "format": "email",
                    "example": "contact@vcalpha.tld"
                },
                "investment_focus": {
                    "description": "Investment focus (industries, stages)",
                    "type": "string",
                    "example": "Seed, Series A"
                },
                "investor_type": {
                    "description": "Type (e.g., VC, CVC, angel)",
                    "type": "string",
                    "example": "VC"
                },
                "legal_status": {
                    "description": "Legal status",
                    "type": "string",
                    "example": "SAS"
                },
                "name": {
                    "description": "Investor legal name",
                    "type": "string",
                    "example": "VC Alpha"
                },
                "phone": {
                    "description": "Contact phone",
                    "type": "string",
                    "example": "+33 1 23 45 67 89"
                }
            }
        },
        "requests.InvestorUpdateRequest": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "New address",
                    "type": "string",
                    "example": "21 Jump Street, Paris"
                },
                "description": {
                    "description": "New description",
                    "type": "string",
                    "example": "New description"
                },
                "email": {
                    "description": "New contact email",
                    "type": "string",
                    "format": "email",
                    "example": "new@vcalpha.tld"
                },
                "investment_focus": {
                    "description": "New investment focus",
                    "type": "string",
                    "example": "Fintech, AI"
                },
                "investor_type": {
                    "description": "New type",
                    "type": "string",
                    "example": "CVC"
                },
                "legal_status": {
                    "description": "New legal status",
                    "type": "string",
                    "example": "SAS"
                },
                "name": {
                    "description": "New legal name",
                    "type": "string",
                    "example": "VC Alpha"
                },
                "phone": {
                    "description": "New phone",
                    "type": "string",
                    "example": "+33 1 23 45 67 89"
                }
            }
        },
        "requests.MessageMarkReadRequest": {
            "type": "object",
            "required": [
                "message_id"
            ],
            "properties": {
                "message_id": {
                    "description": "Message ID to mark as read",
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "requests.MessageSendRequest": {
            "type": "object",
            "required": [
                "content"
            ],
            "properties": {
                "content": {
                    "description": "Message content",
                    "type": "string",
                    "maxLength": 2000,
                    "example": "Hello, how are you?"
                }
            }
        },
        "requests.NewsCreateRequest": {
            "type": "object",
            "required": [
                "description",
                "title"
            ],
            "properties": {
                "category": {
                    "description": "Category or topic",
                    "type": "string",
                    "example": "startup"
                },
                "description": {
                    "description": "Body text",
                    "type": "string",
                    "example": "Series A raised"
                },
                "image": {
                    "description": "Image file (binary upload)",
                    "type": "string",
                    "format": "binary"
                },
                "location": {
                    "description": "Location (if relevant)",
                    "type": "string",
                    "example": "Paris"
                },
                "news_date": {
                    "description": "Publication date (YYYY-MM-DD)",
                    "type": "string",
                    "format": "date",
                    "example": "2025-09-01"
                },
                "startup_id": {
                    "description": "Related startup ID",
                    "type": "integer",
                    "example": 1
                },
                "title": {
                    "description": "News title",
                    "type": "string",
                    "example": "Funding round"
                }
            }
        },
        "requests.NewsUpdateRequest": {
            "type": "object",
            "properties": {
                "category": {
                    "description": "New category",
                    "type": "string",
                    "example": "event"
                },
                "description": {
                    "description": "New body text",
                    "type": "string",
                    "example": "Updated description"
                },
                "image": {
                    "description": "New image file (binary upload)",
                    "type": "string",
                    "format": "binary"
                },
                "location": {
                    "description": "New location",
                    "type": "string",
                    "example": "Lyon"
                },
                "news_date": {
                    "description": "New publication date",
                    "type": "string",
                    "format": "date",
                    "example": "2025-09-02"
                },
                "startup_id": {
                    "description": "New related startup",
                    "type": "integer",
                    "example": 2
                },
                "title": {
                    "description": "New title",
                    "type": "string",
                    "example": "Updated title"
                }
            }
        },
        "requests.OpportunityCreateRequest": {
            "type": "object",
            "properties": {
                "criteria": {
                    "description": "Eligibility criteria",
                    "type": "string",
                    "example": "Student or Startup \u003c 3 years"
                },
                "deadline": {
                    "description": "Deadline (RFC3339)",
                    "type": "string",
                    "format": "date-time"
                },
                "description": {
                    "description": "Short description",
                    "type": "string",
                    "example": "Funding for AI research"
                },
                "external_link": {
                    "description": "External reference URL",
                    "type": "string",
                    "format": "uri",
                    "example": "https://example.com/grant"
                },
                "organism": {
                    "description": "Issuing organization",
                    "type": "string",
                    "example": "EU"
                },
                "title": {
                    "description": "Opportunity title",
                    "type": "string",
                    "example": "AI Grant"
                },
                "type": {
                    "description": "Opportunity type (grant, contest, ...)",
                    "type": "string",
                    "example": "grant"
                }
            }
        },
        "requests.PartnerCreateRequest": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "Mailing address",
                    "type": "string",
                    "example": "5 Avenue Anatole France, Paris"
                },
                "created_at": {
                    "description": "Partnership inception date/time",
                    "type": "string",
                    "format": "date-time"
                },
                "description": {
                    "description": "Short description",
                    "type": "string",
                    "example": "Long-term sponsor"
                },
                "email": {
                    "description": "Contact email",
                    "type": "string",
                    "format": "email",
                    "example": "partners@acme.tld"
                },
                "legal_status": {
                    "description": "Legal status",
                    "type": "string",
                    "example": "SAS"
                },
                "name": {
                    "description": "Partner legal name",
                    "type": "string",
                    "example": "ACME Corp"
                },
                "partnership_type": {
                    "description": "Type of partnership",
                    "type": "string",
                    "example": "sponsor"
                },
                "phone": {
                    "description": "Contact phone",
                    "type": "string",
                    "example": "+33 1 23 45 67 89"
                }
            }
        },
        "requests.PartnerUpdateRequest": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "New address",
                    "type": "string",
                    "example": "10 Rue de Rivoli, Paris"
                },
                "created_at": {
                    "description": "New creation timestamp",
                    "type": "string",
                    "format": "date-time"
                },
                "description": {
                    "description": "New description",
                    "type": "string",
                    "example": "Updated description"
                },
                "email": {
                    "description": "New contact email",
                    "type": "string",
                    "format": "email",
                    "example": "partner@acme.tld"
                },
                "legal_status": {
                    "description": "New legal status",
                    "type": "string",
                    "example": "SASU"
                },
                "name": {
                    "description": "New legal name",
                    "type": "string",
                    "example": "ACME Corp"
                },
                "partnership_type": {
                    "description": "New partnership type",
                    "type": "string",
                    "example": "institutional"
                },
                "phone": {
                    "description": "New phone",
                    "type": "string",
                    "example": "+33 6 12 34 56 78"
                }
            }
        },
        "requests.StartupUpdateRequest": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "Mailing address",
                    "type": "string",
                    "example": "12 Avenue République, Paris"
                },
                "description": {
                    "description": "Short description",
                    "type": "string",
                    "example": "New description"
                },
                "email": {
                    "description": "Contact email",
                    "type": "string",
                    "format": "email",
                    "example": "hello@acme.tld"
                },
                "founders": {
                    "description": "Founders array",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"Alice\"",
                        " \"Bob\"]"
                    ]
                },
                "legal_status": {
                    "description": "Legal status",
                    "type": "string",
                    "example": "SARL"
                },
                "maturity": {
                    "description": "Maturity stage",
                    "type": "string",
                    "enum": [
                        "early",
                        "middle",
                        "late"
                    ],
                    "example": "late"
                },
                "name": {
                    "description": "New startup name",
                    "type": "string",
                    "example": "Acme Updated"
                },
                "needs": {
                    "description": "Stated needs",
                    "type": "string",
                    "example": "Funding only"
                },
                "phone": {
                    "description": "Contact phone",
                    "type": "string",
                    "example": "+33 6 12 34 56 78"
                },
                "project_status": {
                    "description": "Project status",
                    "type": "string",
                    "enum": [
                        "ongoing",
                        "completed"
                    ],
                    "example": "completed"
                },
                "sector": {
                    "description": "Business sector",
                    "type": "string",
                    "enum": [
                        "tech",
                        "health",
                        "finance"
                    ],
                    "example": "finance"
                },
                "social_media_url": {
                    "description": "Social media URL",
                    "type": "string",
                    "format": "uri",
                    "example": "https://linkedin.com/acme"
                },
                "website_url": {
                    "description": "Website URL",
                    "type": "string",
                    "format": "uri",
                    "example": "https://new-acme.tld"
                }
            }
        },
        "requests.UserCreateRequest": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password",
                "role"
            ],
            "properties": {
                "email": {
                    "description": "Email address",
                    "type": "string",
                    "format": "email",
                    "example": "jane@doe.tld"
                },
                "image": {
                    "description": "Avatar image file (binary upload)",
                    "type": "string",
                    "format": "binary"
                },
                "name": {
                    "description": "Display name",
                    "type": "string",
                    "example": "Jane"
                },
                "password": {
                    "description": "Initial password",
                    "type": "string",
                    "minLength": 6,
                    "example": "secret123"
                },
                "role": {
                    "description": "Role to assign",
                    "type": "string",
                    "enum": [
                        "admin",
                        "user",
                        "investor",
                        "founder"
                    ],
                    "example": "admin"
                }
            }
        },
        "requests.UserUpdateRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "New email address",
                    "type": "string",
                    "format": "email",
                    "example": "jane@newmail.tld"
                },
                "image": {
                    "description": "New avatar image file (binary upload)",
                    "type": "string",
                    "format": "binary"
                },
                "name": {
                    "description": "New display name",
                    "type": "string",
                    "example": "Jane Doe"
                },
                "password": {
                    "description": "New password",
                    "type": "string",
                    "example": "newSecret123"
                },
                "role": {
                    "description": "New role",
                    "type": "string",
                    "enum": [
                        "admin",
                        "user",
                        "investor",
                        "founder"
                    ],
                    "example": "user"
                },
                "startup_id": {
                    "description": "New associated founder profile ID (only if user's role is switch to founder)",
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "response.AuthLoginResponse": {
            "type": "object",
            "properties": {
                "user": {
                    "$ref": "#/definitions/models.User"
                }
            }
        },
        "response.AuthRegisterResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                }
            }
        },
        "response.ConversationObjectResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.Conversation"
                }
            }
        },
        "response.ConversationWithUnreadCountResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.Conversation"
                },
                "unread_count": {
                    "type": "integer"
                }
            }
        },
        "response.ConversationsWithUnreadResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/response.ConversationWithUnreadCountResponse"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/response.PageMeta"
                }
            }
        },
        "response.ErrorBody": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Machine-readable error code",
                    "type": "string",
                    "enum": [
                        "invalid_params",
                        "invalid_sort",
                        "invalid_payload",
                        "internal_error",
                        "not_found",
                        "email_taken",
                        "invalid_token",
                        "invalid_credentials",
                        "no_fields",
                        "method_not_allowed",
                        "unauthorized"
                    ],
                    "example": "internal_error"
                },
                "details": {
                    "description": "Optional granular details (validation errors, etc.)"
                },
                "message": {
                    "description": "Human-readable error message",
                    "type": "string",
                    "example": "failed to retrieve resource"
                }
            }
        },
        "response.EventListResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Event"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/response.PageMeta"
                }
            }
        },
        "response.EventObjectResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.Event"
                }
            }
        },
        "response.InvestorListResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Investor"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/response.PageMeta"
                }
            }
        },
        "response.InvestorObjectResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.Investor"
                }
            }
        },
        "response.MessageListResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Message"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/response.PageMeta"
                }
            }
        },
        "response.MessageObjectResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.Message"
                }
            }
        },
        "response.MessageResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "response.NewsListResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.News"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/response.PageMeta"
                }
            }
        },
        "response.NewsObjectResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.News"
                }
            }
        },
        "response.OpportunityListResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Opportunity"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/response.PageMeta"
                }
            }
        },
        "response.OpportunityObjectResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.Opportunity"
                }
            }
        },
        "response.PageMeta": {
            "type": "object",
            "properties": {
                "has_next": {
                    "description": "Whether there is a next page",
                    "type": "boolean",
                    "example": true
                },
                "has_prev": {
                    "description": "Whether there is a previous page",
                    "type": "boolean",
                    "example": false
                },
                "page": {
                    "description": "Current page number (1-based)",
                    "type": "integer",
                    "minimum": 1,
                    "example": 1
                },
                "per_page": {
                    "description": "Page size (items per page)",
                    "type": "integer",
                    "minimum": 1,
                    "example": 20
                },
                "total": {
                    "description": "Total number of items available",
                    "type": "integer",
                    "minimum": 0,
                    "example": 123
                }
            }
        },
        "response.PartnerListResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Partner"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/response.PageMeta"
                }
            }
        },
        "response.PartnerObjectResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.Partner"
                }
            }
        },
        "response.StartupListResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Startup"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/response.PageMeta"
                }
            }
        },
        "response.StartupObjectResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.Startup"
                }
            }
        },
        "response.StatisticsResponse": {
            "type": "object",
            "properties": {
                "engagement_rate_percent": {
                    "type": "number",
                    "example": 12.3
                },
                "period": {
                    "type": "string",
                    "example": "weekly"
                },
                "projects_growth": {
                    "type": "integer",
                    "example": 10
                },
                "total_projects": {
                    "type": "integer",
                    "example": 123
                },
                "total_views": {
                    "type": "integer",
                    "example": 4200
                },
                "views_growth_percent": {
                    "type": "number",
                    "example": 34.5
                }
            }
        },
        "response.SyncStatusResponse": {
            "type": "object",
            "properties": {
                "lastFull": {
                    "type": "string"
                },
                "lastInc": {
                    "type": "string"
                },
                "queue": {
                    "type": "integer"
                },
                "running": {
                    "type": "boolean"
                }
            }
        },
        "response.TopProject": {
            "type": "object",
            "properties": {
                "comments": {
                    "type": "integer",
                    "example": 12
                },
                "engagement_rate_percent": {
                    "type": "number",
                    "example": 23.4
                },
                "likes": {
                    "type": "integer",
                    "example": 45
                },
                "project_id": {
                    "type": "integer",
                    "example": 1
                },
                "title": {
                    "type": "string",
                    "example": "My Startup"
                },
                "views": {
                    "type": "integer",
                    "example": 120
                }
            }
        },
        "response.TopProjectsResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "example": 3
                },
                "generated_at": {
                    "type": "string",
                    "example": "2025-09-10T18:24:00Z"
                },
                "limit": {
                    "type": "integer",
                    "example": 10
                },
                "period": {
                    "type": "string",
                    "example": "week"
                },
                "top_projects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/response.TopProject"
                    }
                }
            }
        },
        "response.UserListResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.User"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/response.PageMeta"
                }
            }
        },
        "response.UserObjectResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.User"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
