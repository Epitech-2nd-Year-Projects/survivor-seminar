definitions:
  models.Conversation:
    properties:
      created_at:
        description: Creation timestamp (UTC)
        format: date-time
        type: string
      id:
        description: Unique conversation identifier
        example: 1
        type: integer
      is_group:
        description: Whether this is a group conversation
        example: false
        type: boolean
      last_message:
        $ref: '#/definitions/models.Message'
      last_message_id:
        description: ID of the last message (optimization)
        type: integer
      messages:
        items:
          $ref: '#/definitions/models.Message'
        type: array
      participants:
        items:
          $ref: '#/definitions/models.ConversationParticipant'
        type: array
      title:
        description: Conversation title (optional, useful for group chats)
        example: Project Discussion
        type: string
      updated_at:
        description: Update timestamp (UTC)
        format: date-time
        type: string
    type: object
  models.ConversationParticipant:
    properties:
      conversation_id:
        description: Conversation ID
        example: 1
        type: integer
      id:
        description: Unique participant identifier
        example: 1
        type: integer
      joined_at:
        description: When the user joined the conversation
        format: date-time
        type: string
      last_read_message_id:
        description: ID of the last message read by this user
        type: integer
      role:
        description: Participant role (member, owner, etc.)
        enum:
        - member
        - owner
        example: member
        type: string
      user:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Relationships
      user_id:
        description: User ID
        example: 1
        type: integer
    type: object
  models.Event:
    properties:
      capacity:
        description: Capacity (seats)
        example: 300
        type: integer
      created_at:
        description: Creation timestamp (UTC)
        format: date-time
        type: string
      description:
        description: Short description
        example: Annual tech conference
        type: string
      end_date:
        description: End date/time (UTC)
        format: date-time
        type: string
      event_type:
        description: Event type
        example: conference
        type: string
      id:
        description: Unique event identifier
        example: 1
        type: integer
      image_url:
        description: Image URL
        example: https://cdn.example.com/events/1.png
        format: uri
        type: string
      location:
        description: Venue or city
        example: Paris
        type: string
      name:
        description: Event name
        example: Conf 2025
        type: string
      start_date:
        description: Start date/time (UTC)
        format: date-time
        type: string
      target_audience:
        description: Intended audience
        example: Startups
        type: string
      updated_at:
        description: Update timestamp (UTC)
        format: date-time
        type: string
    type: object
  models.Investor:
    properties:
      address:
        description: Address
        example: 21 Jump Street, Paris
        type: string
      created_at:
        description: Creation timestamp (UTC)
        format: date-time
        type: string
      description:
        description: Short description
        example: Early-stage VC
        type: string
      email:
        description: Contact email
        example: contact@vcalpha.tld
        format: email
        type: string
      id:
        description: Unique investor identifier
        example: 1
        type: integer
      investment_focus:
        description: Focus (industries, stages)
        example: Seed, Series A
        type: string
      investor_type:
        description: Type (VC, CVC, angel, ...)
        example: VC
        type: string
      legal_status:
        description: Legal status
        example: SaaS
        type: string
      name:
        description: Legal name
        example: VC Alpha
        type: string
      phone:
        description: Contact phone
        example: +33 1 23 45 67 89
        type: string
    type: object
  models.Message:
    properties:
      content:
        description: Message content
        example: Hello, how are you?
        type: string
      conversation_id:
        description: Conversation ID
        example: 1
        type: integer
      created_at:
        description: Creation timestamp (UTC)
        format: date-time
        type: string
      deleted_at:
        description: Soft delete timestamp (for moderation)
        type: string
      id:
        description: Unique message identifier
        example: 1
        type: integer
      sender:
        $ref: '#/definitions/models.User'
      sender_id:
        description: Sender user ID
        example: 1
        type: integer
    type: object
  models.News:
    properties:
      category:
        description: Category or topic
        example: startup
        type: string
      created_at:
        description: Creation timestamp (UTC)
        format: date-time
        type: string
      description:
        description: Body text
        example: Series A raised
        type: string
      id:
        description: Unique news identifier
        example: 1
        type: integer
      image_url:
        description: Image URL
        example: https://cdn.example.com/news/1.png
        format: uri
        type: string
      location:
        description: Location (if relevant)
        example: Paris
        type: string
      news_date:
        description: Publication date
        format: date
        type: string
      startup_id:
        description: Related startup ID
        example: 1
        type: integer
      title:
        description: Title
        example: Funding round
        type: string
      updated_at:
        description: Update timestamp (UTC)
        format: date-time
        type: string
    type: object
  models.Opportunity:
    properties:
      created_at:
        description: Creation timestamp (UTC)
        format: date-time
        type: string
      criteria:
        description: Eligibility criteria
        example: Student or Startup < 3 years
        type: string
      deadline:
        description: Deadline (UTC)
        format: date-time
        type: string
      description:
        description: Short description
        example: Funding program for AI
        type: string
      external_link:
        description: External reference URL
        example: https://example.com/opportunity
        format: uri
        type: string
      id:
        description: Unique opportunity identifier
        example: 1
        type: integer
      organism:
        description: Issuing organization
        example: EU
        type: string
      title:
        description: Opportunity title
        example: AI Grant
        type: string
      type:
        description: Opportunity type
        example: grant
        type: string
      updated_at:
        description: Update timestamp (UTC)
        format: date-time
        type: string
    type: object
  models.Partner:
    properties:
      address:
        description: Mailing address
        example: 5 Avenue Anatole France, Paris
        type: string
      created_at:
        description: Creation timestamp (UTC)
        format: date-time
        type: string
      description:
        description: Short description
        example: Sponsor
        type: string
      email:
        description: Contact email
        example: partners@acme.tld
        format: email
        type: string
      id:
        description: Unique partner identifier
        example: 1
        type: integer
      legal_status:
        description: Legal status
        example: SAS
        type: string
      name:
        description: Partner legal name
        example: ACME Corp
        type: string
      partnership_type:
        description: Type of partnership
        example: sponsor
        type: string
      phone:
        description: Contact phone
        example: +33 1 23 45 67 89
        type: string
    type: object
  models.Startup:
    properties:
      address:
        description: Mailing address
        example: 10 Rue de Rivoli, Paris
        type: string
      created_at:
        description: Creation timestamp (UTC)
        format: date-time
        type: string
      description:
        description: Short description
        example: AI platform for SMBs
        type: string
      email:
        description: Contact email
        example: contact@acme.tld
        format: email
        type: string
      founders:
        description: Founders array (JSON)
        type: object
      id:
        description: Unique startup identifier
        example: 1
        type: integer
      legal_status:
        description: Legal status
        example: SAS
        type: string
      maturity:
        description: Maturity
        enum:
        - early
        - middle
        - late
        example: early
        type: string
      name:
        description: Startup name
        example: Acme
        type: string
      needs:
        description: Stated needs
        example: Funding, Mentorship
        type: string
      phone:
        description: Contact phone
        example: +33 1 23 45 67 89
        type: string
      project_status:
        description: Project status
        enum:
        - ongoing
        - completed
        example: ongoing
        type: string
      sector:
        description: Business sector
        enum:
        - tech
        - health
        - finance
        example: tech
        type: string
      social_media_url:
        description: Social media URL
        example: https://x.com/acme
        format: uri
        type: string
      views_count:
        description: Views count
        example: 0
        type: integer
      website_url:
        description: Website URL
        example: https://acme.tld
        format: uri
        type: string
    type: object
  models.User:
    properties:
      created_at:
        description: Creation timestamp (UTC)
        format: date-time
        type: string
      email:
        description: Email address (unique)
        example: user@example.com
        format: email
        type: string
      email_verified:
        description: Whether the email has been verified
        example: false
        type: boolean
      founder_id:
        description: Related founder profile ID
        example: 1
        type: integer
      id:
        description: Unique user identifier
        example: 1
        type: integer
      image_url:
        description: Avatar URL
        example: https://cdn.example.com/avatars/1.png
        format: uri
        type: string
      investor_id:
        description: Related investor profile ID
        example: 2
        type: integer
      name:
        description: Display name
        example: Jane Doe
        type: string
      role:
        description: Role name
        enum:
        - admin
        - user
        - investor
        - founder
        example: user
        type: string
      updated_at:
        description: Update timestamp (UTC)
        format: date-time
        type: string
    type: object
  requests.AuthForgotPasswordRequest:
    properties:
      email:
        description: Account email to send reset instructions
        example: john@doe.tld
        format: email
        type: string
    type: object
  requests.AuthLoginRequest:
    properties:
      email:
        description: Email address
        example: john@doe.tld
        format: email
        type: string
      password:
        description: Password
        example: secret123
        type: string
    type: object
  requests.AuthRegisterRequest:
    properties:
      email:
        description: Email address of the user
        example: john@doe.tld
        format: email
        type: string
      founder_id:
        description: Optional associated founder profile ID
        example: 1
        type: integer
      image_url:
        description: Optional profile image URL
        example: https://cdn.example.com/avatars/john.png
        format: uri
        type: string
      investor_id:
        description: Optional associated investor profile ID
        example: 2
        type: integer
      name:
        description: Full name to display
        example: John Doe
        type: string
      password:
        description: Plain password (min 6 chars)
        example: secret123
        type: string
      role:
        description: Account role
        enum:
        - investor
        - founder
        example: founder
        type: string
    type: object
  requests.AuthResetPasswordRequest:
    properties:
      new_password:
        description: New password to set
        example: secret123
        type: string
      token:
        description: Password reset token
        example: <reset-token>
        type: string
    type: object
  requests.AuthVerifyRequest:
    properties:
      token:
        description: One-time verification token
        example: <verify-token>
        type: string
    type: object
  requests.ConversationCreateRequest:
    type: object
  requests.InvestorCreateRequest:
    properties:
      address:
        description: Mailing address
        example: 21 Jump Street, Paris
        type: string
      description:
        description: Short description
        example: Early-stage VC
        type: string
      email:
        description: Contact email
        example: contact@vcalpha.tld
        format: email
        type: string
      investment_focus:
        description: Investment focus (industries, stages)
        example: Seed, Series A
        type: string
      investor_type:
        description: Type (e.g., VC, CVC, angel)
        example: VC
        type: string
      legal_status:
        description: Legal status
        example: SAS
        type: string
      name:
        description: Investor legal name
        example: VC Alpha
        type: string
      phone:
        description: Contact phone
        example: +33 1 23 45 67 89
        type: string
    type: object
  requests.InvestorUpdateRequest:
    properties:
      address:
        description: New address
        example: 21 Jump Street, Paris
        type: string
      description:
        description: New description
        example: New description
        type: string
      email:
        description: New contact email
        example: new@vcalpha.tld
        format: email
        type: string
      investment_focus:
        description: New investment focus
        example: Fintech, AI
        type: string
      investor_type:
        description: New type
        example: CVC
        type: string
      legal_status:
        description: New legal status
        example: SAS
        type: string
      name:
        description: New legal name
        example: VC Alpha
        type: string
      phone:
        description: New phone
        example: +33 1 23 45 67 89
        type: string
    type: object
  requests.MessageMarkReadRequest:
    properties:
      message_id:
        description: Message ID to mark as read
        example: 1
        type: integer
    required:
    - message_id
    type: object
  requests.MessageSendRequest:
    properties:
      content:
        description: Message content
        example: Hello, how are you?
        maxLength: 2000
        type: string
    required:
    - content
    type: object
  requests.NewsCreateRequest:
    properties:
      category:
        description: Category or topic
        example: startup
        type: string
      description:
        description: Body text
        example: Series A raised
        type: string
      image:
        description: Image file (binary upload)
        format: binary
        type: string
      location:
        description: Location (if relevant)
        example: Paris
        type: string
      news_date:
        description: Publication date (YYYY-MM-DD)
        example: "2025-09-01"
        format: date
        type: string
      startup_id:
        description: Related startup ID
        example: 1
        type: integer
      title:
        description: News title
        example: Funding round
        type: string
    required:
    - description
    - title
    type: object
  requests.NewsUpdateRequest:
    properties:
      category:
        description: New category
        example: event
        type: string
      description:
        description: New body text
        example: Updated description
        type: string
      image:
        description: New image file (binary upload)
        format: binary
        type: string
      location:
        description: New location
        example: Lyon
        type: string
      news_date:
        description: New publication date
        example: "2025-09-02"
        format: date
        type: string
      startup_id:
        description: New related startup
        example: 2
        type: integer
      title:
        description: New title
        example: Updated title
        type: string
    type: object
  requests.OpportunityCreateRequest:
    properties:
      criteria:
        description: Eligibility criteria
        example: Student or Startup < 3 years
        type: string
      deadline:
        description: Deadline (RFC3339)
        format: date-time
        type: string
      description:
        description: Short description
        example: Funding for AI research
        type: string
      external_link:
        description: External reference URL
        example: https://example.com/grant
        format: uri
        type: string
      organism:
        description: Issuing organization
        example: EU
        type: string
      title:
        description: Opportunity title
        example: AI Grant
        type: string
      type:
        description: Opportunity type (grant, contest, ...)
        example: grant
        type: string
    type: object
  requests.PartnerCreateRequest:
    properties:
      address:
        description: Mailing address
        example: 5 Avenue Anatole France, Paris
        type: string
      created_at:
        description: Partnership inception date/time
        format: date-time
        type: string
      description:
        description: Short description
        example: Long-term sponsor
        type: string
      email:
        description: Contact email
        example: partners@acme.tld
        format: email
        type: string
      legal_status:
        description: Legal status
        example: SAS
        type: string
      name:
        description: Partner legal name
        example: ACME Corp
        type: string
      partnership_type:
        description: Type of partnership
        example: sponsor
        type: string
      phone:
        description: Contact phone
        example: +33 1 23 45 67 89
        type: string
    type: object
  requests.PartnerUpdateRequest:
    properties:
      address:
        description: New address
        example: 10 Rue de Rivoli, Paris
        type: string
      created_at:
        description: New creation timestamp
        format: date-time
        type: string
      description:
        description: New description
        example: Updated description
        type: string
      email:
        description: New contact email
        example: partner@acme.tld
        format: email
        type: string
      legal_status:
        description: New legal status
        example: SASU
        type: string
      name:
        description: New legal name
        example: ACME Corp
        type: string
      partnership_type:
        description: New partnership type
        example: institutional
        type: string
      phone:
        description: New phone
        example: +33 6 12 34 56 78
        type: string
    type: object
  requests.StartupUpdateRequest:
    properties:
      address:
        description: Mailing address
        example: 12 Avenue République, Paris
        type: string
      description:
        description: Short description
        example: New description
        type: string
      email:
        description: Contact email
        example: hello@acme.tld
        format: email
        type: string
      founders:
        description: Founders array
        example:
        - '["Alice"'
        - ' "Bob"]'
        items:
          type: string
        type: array
      legal_status:
        description: Legal status
        example: SARL
        type: string
      maturity:
        description: Maturity stage
        enum:
        - early
        - middle
        - late
        example: late
        type: string
      name:
        description: New startup name
        example: Acme Updated
        type: string
      needs:
        description: Stated needs
        example: Funding only
        type: string
      phone:
        description: Contact phone
        example: +33 6 12 34 56 78
        type: string
      project_status:
        description: Project status
        enum:
        - ongoing
        - completed
        example: completed
        type: string
      sector:
        description: Business sector
        enum:
        - tech
        - health
        - finance
        example: finance
        type: string
      social_media_url:
        description: Social media URL
        example: https://linkedin.com/acme
        format: uri
        type: string
      website_url:
        description: Website URL
        example: https://new-acme.tld
        format: uri
        type: string
    type: object
  requests.UserCreateRequest:
    properties:
      email:
        description: Email address
        example: jane@doe.tld
        format: email
        type: string
      image:
        description: Avatar image file (binary upload)
        format: binary
        type: string
      name:
        description: Display name
        example: Jane
        type: string
      password:
        description: Initial password
        example: secret123
        minLength: 6
        type: string
      role:
        description: Role to assign
        enum:
        - admin
        - user
        - investor
        - founder
        example: admin
        type: string
    required:
    - email
    - name
    - password
    - role
    type: object
  requests.UserUpdateRequest:
    properties:
      email:
        description: New email address
        example: jane@newmail.tld
        format: email
        type: string
      image:
        description: New avatar image file (binary upload)
        format: binary
        type: string
      name:
        description: New display name
        example: Jane Doe
        type: string
      password:
        description: New password
        example: newSecret123
        type: string
      role:
        description: New role
        enum:
        - admin
        - user
        - investor
        - founder
        example: user
        type: string
      startup_id:
        description: New associated founder profile ID (only if user's role is switch
          to founder)
        example: 1
        type: integer
    type: object
  response.AuthLoginResponse:
    properties:
      user:
        $ref: '#/definitions/models.User'
    type: object
  response.AuthRegisterResponse:
    properties:
      message:
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
  response.ConversationObjectResponse:
    properties:
      data:
        $ref: '#/definitions/models.Conversation'
    type: object
  response.ConversationWithUnreadCountResponse:
    properties:
      data:
        $ref: '#/definitions/models.Conversation'
      unread_count:
        type: integer
    type: object
  response.ConversationsWithUnreadResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/response.ConversationWithUnreadCountResponse'
        type: array
      pagination:
        $ref: '#/definitions/response.PageMeta'
    type: object
  response.ErrorBody:
    properties:
      code:
        description: Machine-readable error code
        enum:
        - invalid_params
        - invalid_sort
        - invalid_payload
        - internal_error
        - not_found
        - email_taken
        - invalid_token
        - invalid_credentials
        - no_fields
        - method_not_allowed
        - unauthorized
        example: internal_error
        type: string
      details:
        description: Optional granular details (validation errors, etc.)
      message:
        description: Human-readable error message
        example: failed to retrieve resource
        type: string
    type: object
  response.EventListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Event'
        type: array
      pagination:
        $ref: '#/definitions/response.PageMeta'
    type: object
  response.EventObjectResponse:
    properties:
      data:
        $ref: '#/definitions/models.Event'
    type: object
  response.InvestorListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Investor'
        type: array
      pagination:
        $ref: '#/definitions/response.PageMeta'
    type: object
  response.InvestorObjectResponse:
    properties:
      data:
        $ref: '#/definitions/models.Investor'
    type: object
  response.MessageListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Message'
        type: array
      pagination:
        $ref: '#/definitions/response.PageMeta'
    type: object
  response.MessageObjectResponse:
    properties:
      data:
        $ref: '#/definitions/models.Message'
    type: object
  response.MessageResponse:
    properties:
      message:
        type: string
    type: object
  response.NewsListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.News'
        type: array
      pagination:
        $ref: '#/definitions/response.PageMeta'
    type: object
  response.NewsObjectResponse:
    properties:
      data:
        $ref: '#/definitions/models.News'
    type: object
  response.OpportunityListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Opportunity'
        type: array
      pagination:
        $ref: '#/definitions/response.PageMeta'
    type: object
  response.OpportunityObjectResponse:
    properties:
      data:
        $ref: '#/definitions/models.Opportunity'
    type: object
  response.PageMeta:
    properties:
      has_next:
        description: Whether there is a next page
        example: true
        type: boolean
      has_prev:
        description: Whether there is a previous page
        example: false
        type: boolean
      page:
        description: Current page number (1-based)
        example: 1
        minimum: 1
        type: integer
      per_page:
        description: Page size (items per page)
        example: 20
        minimum: 1
        type: integer
      total:
        description: Total number of items available
        example: 123
        minimum: 0
        type: integer
    type: object
  response.PartnerListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Partner'
        type: array
      pagination:
        $ref: '#/definitions/response.PageMeta'
    type: object
  response.PartnerObjectResponse:
    properties:
      data:
        $ref: '#/definitions/models.Partner'
    type: object
  response.StartupListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Startup'
        type: array
      pagination:
        $ref: '#/definitions/response.PageMeta'
    type: object
  response.StartupObjectResponse:
    properties:
      data:
        $ref: '#/definitions/models.Startup'
    type: object
  response.StatisticsResponse:
    properties:
      engagement_rate_percent:
        example: 12.3
        type: number
      period:
        example: weekly
        type: string
      projects_growth:
        example: 10
        type: integer
      total_projects:
        example: 123
        type: integer
      total_views:
        example: 4200
        type: integer
      views_growth_percent:
        example: 34.5
        type: number
    type: object
  response.SyncStatusResponse:
    properties:
      lastFull:
        type: string
      lastInc:
        type: string
      queue:
        type: integer
      running:
        type: boolean
    type: object
  response.TopProject:
    properties:
      comments:
        example: 12
        type: integer
      engagement_rate_percent:
        example: 23.4
        type: number
      likes:
        example: 45
        type: integer
      project_id:
        example: 1
        type: integer
      title:
        example: My Startup
        type: string
      views:
        example: 120
        type: integer
    type: object
  response.TopProjectsResponse:
    properties:
      count:
        example: 3
        type: integer
      generated_at:
        example: "2025-09-10T18:24:00Z"
        type: string
      limit:
        example: 10
        type: integer
      period:
        example: week
        type: string
      top_projects:
        items:
          $ref: '#/definitions/response.TopProject'
        type: array
    type: object
  response.UserListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.User'
        type: array
      pagination:
        $ref: '#/definitions/response.PageMeta'
    type: object
  response.UserObjectResponse:
    properties:
      data:
        $ref: '#/definitions/models.User'
    type: object
info:
  contact: {}
paths:
  /:
    get:
      description: Returns general information about the service and the API entrypoint.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Basic information
      tags:
      - Health
  /admin/events:
    post:
      consumes:
      - multipart/form-data
      description: Creates an event (admin required).
      parameters:
      - description: Event name
        in: formData
        name: name
        required: true
        type: string
      - description: Description
        in: formData
        name: description
        type: string
      - description: Type (conference, meetup, ...)
        in: formData
        name: event_type
        type: string
      - description: Location
        in: formData
        name: location
        type: string
      - description: Target audience
        in: formData
        name: target_audience
        type: string
      - description: Start date (RFC3339)
        in: formData
        name: start_date
        type: string
      - description: End date (RFC3339)
        in: formData
        name: end_date
        type: string
      - description: Capacity
        in: formData
        name: capacity
        type: integer
      - description: Event image
        in: formData
        name: image
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.EventObjectResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      security:
      - CookieAuth: []
      summary: Create event
      tags:
      - Events
  /admin/events/{id}:
    delete:
      description: Deletes an event (admin required).
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.MessageResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      security:
      - CookieAuth: []
      summary: Delete event
      tags:
      - Events
    patch:
      consumes:
      - multipart/form-data
      description: Updates an event (admin required).
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      - description: Event name
        in: formData
        name: name
        type: string
      - description: Description
        in: formData
        name: description
        type: string
      - description: Type
        in: formData
        name: event_type
        type: string
      - description: Location
        in: formData
        name: location
        type: string
      - description: Audience
        in: formData
        name: target_audience
        type: string
      - description: Start date (RFC3339)
        in: formData
        name: start_date
        type: string
      - description: End date (RFC3339)
        in: formData
        name: end_date
        type: string
      - description: Capacity
        in: formData
        name: capacity
        type: integer
      - description: Event image
        in: formData
        name: image
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.EventObjectResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      security:
      - CookieAuth: []
      summary: Update event
      tags:
      - Events
  /admin/investors:
    post:
      consumes:
      - application/json
      description: Creates an investor (admin required).
      parameters:
      - description: Investor
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/requests.InvestorCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.InvestorObjectResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      security:
      - CookieAuth: []
      summary: Create investor
      tags:
      - Investors
  /admin/investors/{id}:
    delete:
      description: Deletes an investor (admin required).
      parameters:
      - description: Investor ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.MessageResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      security:
      - CookieAuth: []
      summary: Delete investor
      tags:
      - Investors
    patch:
      consumes:
      - application/json
      description: Updates an investor (admin required).
      parameters:
      - description: Investor ID
        in: path
        name: id
        required: true
        type: integer
      - description: Fields to update
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/requests.InvestorUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.InvestorObjectResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      security:
      - CookieAuth: []
      summary: Update investor
      tags:
      - Investors
  /admin/news:
    post:
      consumes:
      - application/json
      description: Creates a news item (admin required).
      parameters:
      - description: News
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/requests.NewsCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.NewsObjectResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      security:
      - CookieAuth: []
      summary: Create news
      tags:
      - News
  /admin/news/{id}:
    delete:
      description: Deletes a news item (admin required).
      parameters:
      - description: News ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.MessageResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      security:
      - CookieAuth: []
      summary: Delete news
      tags:
      - News
    patch:
      consumes:
      - application/json
      description: Updates a news item (admin required).
      parameters:
      - description: News ID
        in: path
        name: id
        required: true
        type: integer
      - description: Fields to update
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/requests.NewsUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.NewsObjectResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      security:
      - CookieAuth: []
      summary: Update news
      tags:
      - News
  /admin/opportunities:
    post:
      consumes:
      - application/json
      description: Creates an opportunity (admin required).
      parameters:
      - description: Opportunity
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/requests.OpportunityCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.OpportunityObjectResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      security:
      - CookieAuth: []
      summary: Create opportunity
      tags:
      - Opportunities
  /admin/opportunities/{id}:
    delete:
      description: Deletes an opportunity (admin required).
      parameters:
      - description: Opportunity ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.MessageResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      security:
      - CookieAuth: []
      summary: Delete opportunity
      tags:
      - Opportunities
  /admin/partners:
    post:
      consumes:
      - application/json
      description: Creates a partner (admin required).
      parameters:
      - description: Partner
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/requests.PartnerCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.PartnerObjectResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      security:
      - CookieAuth: []
      summary: Create partner
      tags:
      - Partners
  /admin/partners/{id}:
    delete:
      description: Deletes a partner (admin required).
      parameters:
      - description: Partner ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.MessageResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      security:
      - CookieAuth: []
      summary: Delete partner
      tags:
      - Partners
    patch:
      consumes:
      - application/json
      description: Updates a partner (admin required).
      parameters:
      - description: Partner ID
        in: path
        name: id
        required: true
        type: integer
      - description: Fields to update
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/requests.PartnerUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.PartnerObjectResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      security:
      - CookieAuth: []
      summary: Update partner
      tags:
      - Partners
  /admin/startups:
    post:
      consumes:
      - application/json
      description: Creates a startup (admin required).
      parameters:
      - description: Startup
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.Startup'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.StartupObjectResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      security:
      - CookieAuth: []
      summary: Create startup
      tags:
      - Startups
  /admin/startups/{id}:
    delete:
      description: Deletes a startup by ID (admin required).
      parameters:
      - description: Startup ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.MessageResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      security:
      - CookieAuth: []
      summary: Delete startup
      tags:
      - Startups
    patch:
      consumes:
      - application/json
      description: Updates a startup by ID (admin required).
      parameters:
      - description: Startup ID
        in: path
        name: id
        required: true
        type: integer
      - description: Fields to update
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/requests.StartupUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.StartupObjectResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      security:
      - CookieAuth: []
      summary: Update startup
      tags:
      - Startups
  /admin/statistics:
    get:
      description: Retrieves various statistics about projects and engagement.
      parameters:
      - default: weekly
        description: Time period for growth calculation
        enum:
        - weekly
        - monthly
        in: query
        name: period
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.StatisticsResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      security:
      - CookieAuth: []
      summary: Get general statistics
      tags:
      - Admin/Statistics
  /admin/statistics/top:
    get:
      description: Returns a list of top projects based on views count for a given
        period.
      parameters:
      - default: 10
        description: Number of top projects to return
        in: query
        name: limit
        type: integer
      - default: week
        description: Time period for top projects
        enum:
        - week
        - month
        - all
        in: query
        name: period
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.TopProjectsResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      security:
      - CookieAuth: []
      summary: Get top projects
      tags:
      - Admin/Statistics
  /admin/sync/full:
    post:
      description: Queues a full synchronization.
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      security:
      - CookieAuth: []
      summary: Trigger full sync
      tags:
      - Admin/Sync
  /admin/sync/incremental:
    post:
      description: Queues an incremental synchronization.
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      security:
      - CookieAuth: []
      summary: Trigger incremental sync
      tags:
      - Admin/Sync
  /admin/sync/status:
    get:
      description: Returns the scheduler state (running flag, queue length, last runs).
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SyncStatusResponse'
      security:
      - CookieAuth: []
      summary: Sync status
      tags:
      - Admin/Sync
  /admin/users:
    post:
      consumes:
      - application/json
      description: Creates a user (admin required).
      parameters:
      - description: User
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/requests.UserCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.UserObjectResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      security:
      - CookieAuth: []
      summary: Create user
      tags:
      - Users
  /admin/users/{id}:
    delete:
      description: Deletes a user by ID (admin required).
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.MessageResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      security:
      - CookieAuth: []
      summary: Delete user
      tags:
      - Users
    patch:
      consumes:
      - application/json
      description: Updates a user (admin required).
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Fields to update
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/requests.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UserObjectResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      security:
      - CookieAuth: []
      summary: Update user
      tags:
      - Users
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Sends a password reset email (if the user exists).
      parameters:
      - description: Email
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/requests.AuthForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorBody'
      summary: Forgot password
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Verifies credentials, sets HttpOnly cookies, and returns the user
        profile. No tokens in response.
      parameters:
      - description: Credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/requests.AuthLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.AuthLoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      summary: Sign in
      tags:
      - Auth
  /auth/logout:
    post:
      description: Clears auth cookies.
      responses:
        "204":
          description: No Content
      summary: Logout
      tags:
      - Auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Issues new cookies using the refresh token cookie. No body required;
        no content returned.
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      summary: Refresh session
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Creates a user, sends a verification email, and returns the profile.
        No tokens are returned; cookies are set after login.
      parameters:
      - description: Registration data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/requests.AuthRegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.AuthRegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      summary: Sign up
      tags:
      - Auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Updates the password using a valid reset token.
      parameters:
      - description: New password
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/requests.AuthResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      summary: Reset password
      tags:
      - Auth
  /auth/verify:
    get:
      description: Verifies the user's email using a one-time token.
      parameters:
      - description: Verification token
        in: query
        name: token
        type: string
      - description: Token in body
        in: body
        name: payload
        schema:
          $ref: '#/definitions/requests.AuthVerifyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      summary: Verify email
      tags:
      - Auth
    post:
      description: Verifies the user's email using a one-time token.
      parameters:
      - description: Verification token
        in: query
        name: token
        type: string
      - description: Token in body
        in: body
        name: payload
        schema:
          $ref: '#/definitions/requests.AuthVerifyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      summary: Verify email
      tags:
      - Auth
  /conversations:
    get:
      description: Returns a paginated list of conversations for the authenticated
        user with unread counts.
      parameters:
      - default: 1
        description: Page
        in: query
        name: page
        type: integer
      - default: 20
        description: Page size
        in: query
        name: per_page
        type: integer
      - default: updated_at
        description: Sort field
        enum:
        - id
        - created_at
        - updated_at
        in: query
        name: sort
        type: string
      - default: desc
        description: Sort order
        enum:
        - asc
        - desc
        in: query
        name: order
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ConversationsWithUnreadResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      security:
      - CookieAuth: []
      summary: List user conversations
      tags:
      - Conversations
    post:
      consumes:
      - application/json
      description: Creates a new conversation with specified participants.
      parameters:
      - description: Conversation
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/requests.ConversationCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.ConversationObjectResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      security:
      - CookieAuth: []
      summary: Create conversation
      tags:
      - Conversations
  /conversations/{id}:
    get:
      description: Retrieves a conversation by ID with messages.
      parameters:
      - description: Conversation ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ConversationObjectResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      security:
      - CookieAuth: []
      summary: Get conversation
      tags:
      - Conversations
  /conversations/{id}/mark-read:
    post:
      consumes:
      - application/json
      description: Marks messages as read up to a specific message ID.
      parameters:
      - description: Conversation ID
        in: path
        name: id
        required: true
        type: integer
      - description: Message ID
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/requests.MessageMarkReadRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      security:
      - CookieAuth: []
      summary: Mark message as read
      tags:
      - Conversations
  /conversations/{id}/messages:
    get:
      description: Returns paginated messages for a conversation.
      parameters:
      - description: Conversation ID
        in: path
        name: id
        type: integer
      - default: 1
        description: Page
        in: query
        name: page
        type: integer
      - default: 20
        description: Page size
        in: query
        name: per_page
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.MessageListResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      security:
      - CookieAuth: []
      summary: Get conversation messages
      tags:
      - Conversations
    post:
      consumes:
      - application/json
      description: Sends a message to a conversation.
      parameters:
      - description: Conversation ID
        in: path
        name: id
        required: true
        type: integer
      - description: Message
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/requests.MessageSendRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.MessageObjectResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      security:
      - CookieAuth: []
      summary: Send message
      tags:
      - Conversations
  /events:
    get:
      description: Returns a paginated list of events with filters and sorting.
      parameters:
      - default: 1
        description: Page
        in: query
        name: page
        type: integer
      - default: 20
        description: Page size
        in: query
        name: per_page
        type: integer
      - default: start_date
        description: Sort field
        enum:
        - id
        - name
        - event_type
        - start_date
        - end_date
        - created_at
        - updated_at
        in: query
        name: sort
        type: string
      - default: desc
        description: Sort order
        enum:
        - asc
        - desc
        in: query
        name: order
        type: string
      - description: Filter by event type
        in: query
        name: event_type
        type: string
      - description: Filter by location
        in: query
        name: location
        type: string
      - description: Filter by start date (YYYY-MM-DD)
        in: query
        name: start_date
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.EventListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      summary: List events
      tags:
      - Events
  /events/{id}:
    get:
      description: Retrieves an event by ID.
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.EventObjectResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      summary: Get event
      tags:
      - Events
  /founder/startups/{id}:
    delete:
      description: Deletes a startup by ID (admin required).
      parameters:
      - description: Startup ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.MessageResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      security:
      - CookieAuth: []
      summary: Delete startup
      tags:
      - Startups
    patch:
      consumes:
      - application/json
      description: Updates a startup by ID (admin required).
      parameters:
      - description: Startup ID
        in: path
        name: id
        required: true
        type: integer
      - description: Fields to update
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/requests.StartupUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.StartupObjectResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      security:
      - CookieAuth: []
      summary: Update startup
      tags:
      - Startups
  /health:
    get:
      description: Returns dependencies state (DB, etc.), uptime, environment and
        version.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: API health status
      tags:
      - Health
  /investors:
    get:
      description: Returns a paginated list of investors with filters and sorting.
      parameters:
      - default: 1
        description: Page
        in: query
        name: page
        type: integer
      - default: 20
        description: Page size
        in: query
        name: per_page
        type: integer
      - default: created_at
        description: Sort field
        enum:
        - id
        - name
        - email
        - created_at
        - investor_type
        - investment_focus
        in: query
        name: sort
        type: string
      - default: desc
        description: Sort order
        enum:
        - asc
        - desc
        in: query
        name: order
        type: string
      - description: Filter by investor type
        in: query
        name: investor_type
        type: string
      - description: Filter by investment focus (contains)
        in: query
        name: investment_focus
        type: string
      - description: Filter by email
        in: query
        name: email
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.InvestorListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      summary: List investors
      tags:
      - Investors
  /investors/{id}:
    get:
      description: Retrieves an investor by ID.
      parameters:
      - description: Investor ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.InvestorObjectResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      summary: Get investor
      tags:
      - Investors
  /news:
    get:
      description: Returns a paginated list of news with filters and sorting.
      parameters:
      - default: 1
        description: Page
        in: query
        name: page
        type: integer
      - default: 20
        description: Page size
        in: query
        name: per_page
        type: integer
      - default: news_date
        description: Sort field
        enum:
        - id
        - title
        - news_date
        - category
        - startup_id
        - created_at
        - updated_at
        in: query
        name: sort
        type: string
      - default: desc
        description: Sort order
        enum:
        - asc
        - desc
        in: query
        name: order
        type: string
      - description: Filter by category
        in: query
        name: category
        type: string
      - description: Filter by startup ID
        in: query
        name: startup_id
        type: integer
      - description: Filter by news date (YYYY-MM-DD)
        in: query
        name: news_date
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.NewsListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      summary: List news
      tags:
      - News
  /news/{id}:
    get:
      description: Retrieves a news item by ID.
      parameters:
      - description: News ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.NewsObjectResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      summary: Get news item
      tags:
      - News
  /opportunities:
    get:
      description: Returns a paginated list of opportunities with filters and sorting.
      parameters:
      - default: 1
        description: Page
        in: query
        name: page
        type: integer
      - default: 20
        description: Page size
        in: query
        name: per_page
        type: integer
      - default: created_at
        description: Sort field
        enum:
        - id
        - title
        - type
        - organism
        - deadline
        - created_at
        - updated_at
        in: query
        name: sort
        type: string
      - default: desc
        description: Sort order
        enum:
        - asc
        - desc
        in: query
        name: order
        type: string
      - description: Filter by type (grant, loan, etc.)
        in: query
        name: type
        type: string
      - description: Filter by organism
        in: query
        name: organism
        type: string
      - description: Filter by deadline (YYYY-MM-DD)
        in: query
        name: deadline
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.OpportunityListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      summary: List opportunities
      tags:
      - Opportunities
  /opportunities/{id}:
    get:
      description: Retrieves an opportunity by ID.
      parameters:
      - description: Opportunity ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.OpportunityObjectResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      summary: Get opportunity
      tags:
      - Opportunities
  /partners:
    get:
      description: Returns a paginated list of partners with sorting.
      parameters:
      - default: 1
        description: Page
        in: query
        name: page
        type: integer
      - default: 20
        description: Page size
        in: query
        name: per_page
        type: integer
      - default: created_at
        description: Sort field
        enum:
        - id
        - name
        - email
        - legal_status
        - partnership_type
        - created_at
        in: query
        name: sort
        type: string
      - default: desc
        description: Sort order
        enum:
        - asc
        - desc
        in: query
        name: order
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.PartnerListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      summary: List partners
      tags:
      - Partners
  /partners/{id}:
    get:
      description: Retrieves a partner by ID.
      parameters:
      - description: Partner ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.PartnerObjectResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      summary: Get partner
      tags:
      - Partners
  /startups:
    get:
      description: Returns a paginated list of startups with filters and sorting.
      parameters:
      - default: 1
        description: Page
        in: query
        name: page
        type: integer
      - default: 20
        description: Page size
        in: query
        name: per_page
        type: integer
      - default: created_at
        description: Sort field
        in: query
        name: sort
        type: string
      - default: desc
        description: Sort order
        enum:
        - asc
        - desc
        in: query
        name: order
        type: string
      - description: Sector filter
        enum:
        - tech
        - health
        - finance
        in: query
        name: sector
        type: string
      - description: Maturity filter
        enum:
        - early
        - middle
        - late
        in: query
        name: maturity
        type: string
      - description: Project status
        enum:
        - ongoing
        - completed
        in: query
        name: project_status
        type: string
      - description: Founder filter
        in: query
        name: founder
        type: string
      - description: CreatedAt filter
        in: query
        name: created_at
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.StartupListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      summary: List startups
      tags:
      - Startups
  /startups/{id}:
    get:
      description: Retrieves a startup by ID.
      parameters:
      - description: Startup ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.StartupObjectResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      summary: Get startup
      tags:
      - Startups
  /startups/{id}/views:
    post:
      description: Increments the views counter of a startup.
      parameters:
      - description: Startup ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.StartupObjectResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      summary: Increment views count
      tags:
      - Startups
  /users:
    get:
      description: Returns a paginated list of users with optional filters.
      parameters:
      - default: 1
        description: Page
        in: query
        name: page
        type: integer
      - default: 20
        description: Page size
        in: query
        name: per_page
        type: integer
      - default: created_at
        description: Sort field
        enum:
        - id
        - email
        - name
        - role
        - created_at
        - updated_at
        in: query
        name: sort
        type: string
      - default: desc
        description: Sort order
        enum:
        - asc
        - desc
        in: query
        name: order
        type: string
      - description: Filter by role
        enum:
        - admin
        - user
        - investor
        - founder
        in: query
        name: role
        type: string
      - description: Filter by email (contains)
        in: query
        name: email
        type: string
      - description: Filter by name (contains)
        in: query
        name: name
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UserListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      summary: List users
      tags:
      - Users
  /users/{id}:
    get:
      description: Retrieves a user by ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UserObjectResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      security:
      - CookieAuth: []
      summary: Get user
      tags:
      - Users
  /users/email/{email}:
    get:
      description: Retrieves a user by email.
      parameters:
      - description: User email
        in: path
        name: email
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UserObjectResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      security:
      - CookieAuth: []
      summary: Get user by email
      tags:
      - Users
  /users/me:
    get:
      description: Returns the current authenticated user's profile.
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UserObjectResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorBody'
      security:
      - CookieAuth: []
      summary: My profile
      tags:
      - Users
swagger: "2.0"
